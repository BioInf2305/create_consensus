import create_consensus
import pysam
import pytest

chrom = "26"
start = 1
end = 720


def test_extract_ref_seq():
    """test the composition of reference fasta sequence extracted from ensembl matches with the ones extracted"""

    seq = create_consensus.extract_ref_seq(
        "test_files/chr26_sheep.fasta.gz", "26", 1660001, 1670000
    )
    true_seq = ""
    # 26_1660001_1670000.txt, sequence extracted using ensembl
    with open("test_files/26_1660001_1670000_ensembl.txt") as source:
        for line in source:
            line = line.rstrip()
            true_seq += line
    assert seq.capitalize() == true_seq.capitalize()


def test_genotypes_vcf_to_consesnsus(tmp_path):
    """test that the consensus sequences generated by the function matches with the ones manually generated"""

    seq = create_consensus.extract_ref_seq(
        "test_files/26_1_720bp.fasta", chrom, start, end
    )
    seq_dict = create_consensus.vcf_to_consensus(
        seq, "./test_files/test1.vcf.gz", chrom, start, end
    )
    out_fasta = tmp_path / "consensus.fa"
    create_consensus.seq_dict_to_fasta(seq_dict, out_fasta)
    exp_fasta = pysam.FastaFile("test_files/test1.fasta")
    gen_fasta = pysam.FastaFile(str(out_fasta))
    # compare all sequence names and sequences
    assert set(gen_fasta.references) == set(exp_fasta.references)

    for ref in gen_fasta.references:
        assert gen_fasta.fetch(ref) == exp_fasta.fetch(ref)


def test_vcf_wrong_reference():
    """test that function generates error when reference allele do not match"""

    seq = create_consensus.extract_ref_seq(
        "test_files/26_1_720bp.fasta", chrom, start, end
    )
    with pytest.raises(
        create_consensus.ReferenceAlleleMismatchError,
        match="reference base does not match",
    ):
        seq_dict = create_consensus.vcf_to_consensus(
            seq, "./test_files/test2.vcf.gz", chrom, start, end
        )


def test_vcf_wrong_reference_plink_vcf():
    """test that function generates error when reference allele do not match"""

    seq = create_consensus.extract_ref_seq(
        "test_files/26_1_720bp.fasta", chrom, start, end
    )
    with pytest.raises(
        create_consensus.ReferenceAlleleMismatchError,
        match="reference base does not match",
    ):
        seq_dict = create_consensus.vcf_to_consensus(
            seq, "./test_files/test3.vcf.gz", chrom, start, end, plink_vcf=True
        )


# def test_unexpected_genotype_format():
#    """test that the function generates error when vcf file contains genotypes in unexpected format"""
#    seq = create_consensus.extract_ref_seq("test_files/26_1_720bp.fasta",chrom,start,end)
#    with pytest.raises(create_consensus.GenotypeFormatError, match="genotypes in unexpected format"):
#        seq_dict = create_consensus.vcf_to_consensus(seq,"./test_files/test4.vcf.gz",chrom,start,end)
